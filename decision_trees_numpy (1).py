# -*- coding: utf-8 -*-
"""Decision_Trees_numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zijukeCiSATbLjiKlQDDZg5MBE_jXfKj
"""

import numpy as np
import pandas as pd

eps = np.finfo(float).eps

eps

df=pd.read_csv("Play Tennis.csv")

df.shape

df.values

df.keys()

df = df[df.columns[1:]]

df

target = df.keys()[-1]
target

def find_entropy_whole(df):
    target = df.keys()[-1]
    overall_entropy = 0
    values_in_target = df[target].unique()

    for value in values_in_target:
        p = df[target].value_counts()[value]/len(df[target])
        overall_entropy+= -p*np.log2(p)
    
    return overall_entropy

find_entropy_whole(df)

def entropy_of_an_attribute(df, attribute):
    target = df.keys()[-1]
    values_in_target = df[target].unique()    
    values_in_attribute = df[attribute].unique()
    entropy_attribute = 0

    for value in values_in_attribute:
        overall_entropy = 0

        for v in values_in_target:
            num = len(df[attribute][df[attribute] == value][df[target] == v])
            den = len(df[attribute][df[attribute] == value])
            p = num/(den+eps)
            overall_entropy = -p*np.log2(p+eps)
        p2 = den/len(df)
        entropy_attribute += -p2*overall_entropy

    return abs(entropy_attribute)

for i in df.keys()[:-1]:
    print(entropy_of_an_attribute(df,i))

def best_attribute(df):
    IG = []
    names = df.keys()[-1]
    for attr in names:
        IG.append(find_entropy_whole(df) - entropy_of_an_attribute(df,attr))

    max_IG_index = np.argmax(IG)
    best = names[max_IG_index]

    return best

def buildTree(df,tree = None):
    target = df.keys()[-1]
    node = best_attribute(df)
    attValue = np.unique(df[node])

    if tree is None:
        tree = {}
        tree[node] = {}
    
    for value in attValue:
        subtable = df[df[node] == value].reset_index(drop = True)
        clValue, counts = np.unique(subtable['play'],return_counts=True)

        if len(counts) == 1:
            tree[node][value] = clValue[0]
        else:
            tree[node][value] = buildTree(subtable)

    return tree